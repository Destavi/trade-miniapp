const API_BASE = ""; // "" = —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
async function loadLatestSignal() {
  const res = await fetch(`${API_BASE}/api/signals/latest`);
  const data = await res.json();
  document.getElementById("latest-signal").innerHTML = `
    <p>–ü–∞—Ä–∞: ${data.pair}</p>
    <p>–°–¥–µ–ª–∫–∞: ${data.direction}</p>
    <p>–ß–µ—Ä–µ–∑: ${data.entryTime} –º–∏–Ω</p>
    <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.duration} –º–∏–Ω</p>
    <p>–ü—Ä–æ–≥–Ω–æ–∑: ${data.percent}%</p>
  `;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
async function loadHistory() {
  const res = await fetch(`${API_BASE}/api/signals/history?limit=5`);
  const data = await res.json();
  const list = document.getElementById("history");
  list.innerHTML = "";
  let labels = [], values = [];
  data.forEach(sig => {
    const li = document.createElement("li");
    li.textContent = `${sig.pair} | ${sig.direction} | ${sig.percent}%`;
    list.appendChild(li);
    labels.push(sig.pair);
    values.push(sig.percent);
  });
  renderChart(labels, values);
}

// –ì—Ä–∞—Ñ–∏–∫
function renderChart(labels, values) {
  new Chart(document.getElementById("historyChart"), {
    type: "line",
    data: {
      labels,
      datasets: [{
        label: "–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
        data: values,
        borderColor: "#58a6ff",
        fill: false
      }]
    }
  });
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async function loadStats() {
  const res = await fetch(`${API_BASE}/api/stats`);
  const data = await res.json();
  document.getElementById("stats").innerHTML =
    `üë• –í—Å–µ–≥–æ: ${data.total_users} | üî• –ê–∫—Ç–∏–≤–Ω—ã–µ: ${data.active_today} | üîî –ü–æ–¥–ø–∏—Å–∞–Ω—ã: ${data.subscribed}`;
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
function calculate() {
  const amount = parseFloat(document.getElementById("amount").value);
  const res = [0.5, 1, 2].map(p => `${p}% ‚Üí ${(amount * p / 100).toFixed(2)}$`);
  document.getElementById("calc-result").innerHTML = res.join("<br>");
}

// –ü–æ–¥–ø–∏—Å–∫–∞
async function subscribe() {
  const tg = window.Telegram?.WebApp;
  if (!tg) {
    alert("–û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Mini App");
    return;
  }
  const user = tg.initDataUnsafe.user;
  await fetch(`${API_BASE}/api/subscribe`, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({id: user.id, subscribe: true})
  });
  alert("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ");
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
async function saveUser() {
  const tg = window.Telegram?.WebApp;
  if (!tg) return;
  const user = tg.initDataUnsafe.user;
  await fetch(`${API_BASE}/api/saveUser`, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify(user)
  });
}

// –ê–¥–º–∏–Ω–∫–∞ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
const form = document.getElementById("signal-form");
if (form) {
  form.addEventListener("submit", async e => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const res = await fetch(`${API_BASE}/api/admin/add_signal`, {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({...data, admin_token: "supersecret"})
    });
    const out = await res.json();
    document.getElementById("admin-result").textContent = JSON.stringify(out);
    loadStats();
  });
}

// –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
window.addEventListener("load", () => {
  saveUser();
  loadLatestSignal();
  loadHistory();
  loadStats();
});
